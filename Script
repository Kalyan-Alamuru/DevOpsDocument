@Library('shared-jenkins') _
import java.text.SimpleDateFormat

def buildAgent = 'ansible2.5.0'
def ansibleVersion = 'ansible2.5.0'
def playbook = ""
def extraVars = ""
def inventoryFile = ""

//scm pull variables
def branchUsed = '*/master'
def jenkinsCredentialForGit = 'removed'
def gitCloneURL = 'removed'
def playbookPathPrefix = '${WORKSPACE}/ansible'
def limit = ''

if (environment == 'prod')
{
    buildAgent = 'prod'
    ansbileVersion = 'ansible2.5.0'
}


timestamps
{
    node("$buildAgent"){
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]){
                stage('SCM Pull'){
                        currentBuild.displayName = BUILD_NUMBER + ': ' + environment
                        currentBuild.description = "All API Deployed"
                        deleteDir()
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "$branchUsed"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'ansible/']]]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "$jenkinsCredentialForGit", url: "$gitCloneURL"]]]
                }

                stage('ansible deploy'){
                        withCredentials([file(credentialsId: "$jenkinsVaultpassFile", variable: 'vaultpass')])
                        {
                            if (ServiceType == 'api'){
								if (binderVersion != ""){
									 playbook = "$playbookPathPrefix/leapfrog-api.yml"
									 module = "binder"
									 extraVars = "-e \"env=${environment} buildVersion=${binderVersion} moduleName=${module} HARD_INSTALL=${hardinstall} \" --vault-password-file=$vaultpass"
									 inventoryFile = "$playbookPathPrefix/inventory/leapfrog.${environment}"
									 limit = "${serverName}"
									 executePlaybook(playbook, inventoryFile, limit, extraVars, ServiceType)
								}
								if (chartVersion != ""){
									 playbook = "$playbookPathPrefix/leapfrog-api.yml"
									 module = "chart"
									 extraVars = "-e \"env=${environment} buildVersion=${chartVersion} moduleName=${module} HARD_INSTALL=${hardinstall} \" --vault-password-file=$vaultpass"
									 inventoryFile = "$playbookPathPrefix/inventory/leapfrog.${environment}"
									 limit = "${serverName}"
									 executePlaybook(playbook, inventoryFile, limit, extraVars, ServiceType)
								}
										 
							}
                        }
					}
			}
        }
	def executePlaybook(def playbook, def inventoryFile, def limit, def extraVars, def ServiceType){

			try {
				ansiblePlaybook(
				playbook: "$playbook",
				inventory: "$inventoryFile",
				colorized: true,
				limit: "$limit",
				installation: "$buildAgent",
				extras: "$extraVars")
			}
			catch (e)
			{
				currentBuild.result='FAILURE'
				throw e

			}   
			finally
			{
				pushDeployLogsToBAMS.push( "LeapfrogDeployment-$ServiceType", environment, BuildVersion, ansibleVersion)
			}
	}

}


