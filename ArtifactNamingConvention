Maven Artifacts Naming Convention

groupId will identify your project uniquely across all projects, so we need to enforce a naming schema. It has to follow the package name rules, what means that 
has to be at least as a domain name you control, and you can create as many subgroups as you want. 
eg. org.apache.maven, org.apache.commons A good way to determine the granularity of the groupId is to use the project structure. 
That is, if the current project is a multiple module project, it should append a new identifier to the parent's groupId. 
 
eg. org.apache.maven, org.apache.maven.plugins, org.apache.maven.reporting
 
Now if we need to work with artifacts naming convention before pushing the artifacts to Artifactory. We can use the company and project details in groupId which is
use as an identifier to identify the project.


 groupId : org.companyname.projectname

artifactId is the name of the artifact without version. If you created it then you can choose whatever name you want with lowercase letters and no strange symbols. 
If it's a third party jar you have to take the name of the jar as it's distributed.eg. maven, commons-math

We can include the git repo name in the artifact name and we can add see from artifact name what exactly repo artifact is that fine.

e.g artifactId : appname.gitreponame

version if you distribute it then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). 
Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.
eg. 2.0, 2.0.1, 1.3.1

We can use Jenkins Biild No to use as artifact version.

e.g.  

Jenkins Build No 201:	1.0.<JENKINS_BUILD_NO>-SNAPSHOT


We have sample pom file content as below which is just a simple war file build script. We will assign the values of artifactId and URL paramaters in project tab
so that the artifact name will be generated with repo details in artifact name. we will use below command to run build using below pom file.

Lets create the artifact name using Jenkins inbuilt variables and lets assume git URL is https://github.com/user/repo.git and Build Number is 153.

version="$BUILD_NUMBER"

RepoName="`echo $GIT_URL|awk -F'/' '{print $NF}'`-`echo $GIT_BRANCH`"

artifactname="appname.$RepoName"

mvn clean install -Dartifact.name=$artifactname -Dartifact.version=$version

After execution of above maven project we will get below artifact name which we can push to artifactory.

e.g.
	Artifact Name :	"appname.repo.git-master-1.0.153-SNAPSHOT.war"
	Version : "1.0.153-SNAPSHOT"

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.companyname.projectname</groupId>
    <artifactId>${artifact.name}</artifactId>
    <version>1.0.${artifact.version}-SNAPSHOT</version>
    <packaging>war</packaging>
    <url></url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring.version>3.2.4.RELEASE</spring.version>
		<artifact.name></artifact.name>
		<artifact.version></artifact.version>
    </properties>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <resources>
            <resource>
                <directory>src/main/resources/common</directory>
            </resource>
        </resources>
        <outputDirectory>src/main/webapp/WEB-INF/classes</outputDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>
        <testOutputDirectory>target/test-classes</testOutputDirectory>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <defaultGoal>validate</defaultGoal>

        <plugins>

            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <id>make-a-jar</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>**/*.xml</exclude>
                                <exclude>**/*.properties</exclude>
                                <exclude>**/SampleController*</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <packaging>jar</packaging>
                            <artifactId>${project.artifactId}</artifactId>
                            <groupId>${project.groupId}</groupId>
                            <version>${project.version}</version>
                            <file>${project.build.directory}/${project.artifactId}.jar</file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
